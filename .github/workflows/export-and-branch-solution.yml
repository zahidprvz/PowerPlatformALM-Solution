name: export-and-branch-solution

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: 'Name of the solution to export'
        required: true
        default: ITHistoryV5
      solution_exported_folder:
        description: 'Folder for exported zips'
        required: true
        default: out/exported/
      solution_folder:
        description: 'Folder for unpacked solution (Unmanaged)'
        required: true
        default: out/solutions/
      solution_target_folder: 
        description: 'Folder to commit to repo'
        required: true
        default: solutions/

permissions:
  contents: write
  pull-requests: write

jobs:
  export-from-dev:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITTOKEN }}
          lfs: true

      - name: Create required directories
        run: |
          New-Item -ItemType Directory -Force -Path "${{ github.event.inputs.solution_exported_folder }}" | Out-Null
          New-Item -ItemType Directory -Force -Path "${{ github.event.inputs.solution_folder }}" | Out-Null
          New-Item -ItemType Directory -Force -Path "${{ github.event.inputs.solution_target_folder }}" | Out-Null
          New-Item -ItemType Directory -Force -Path "out/managed" | Out-Null
        shell: pwsh

      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Who Am I (Source Environment)
        uses: microsoft/powerplatform-actions/who-am-i@v1
        with:
          environment-url: ${{ secrets.ENVIRONMENT_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}

      - name: Export Solution (Unmanaged)
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ secrets.ENVIRONMENT_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: ${{ github.event.inputs.solution_name }}
          solution-output-file: ${{ github.event.inputs.solution_exported_folder }}${{ github.event.inputs.solution_name }}_Unmanaged.zip

      - name: Export Solution (Managed)
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ secrets.ENVIRONMENT_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: ${{ github.event.inputs.solution_name }}
          solution-output-file: out/managed/${{ github.event.inputs.solution_name }}_Managed.zip
          managed: true

      - name: Unpack Unmanaged Solution
        uses: microsoft/powerplatform-actions/unpack-solution@v1
        with:
          solution-file: ${{ github.event.inputs.solution_exported_folder }}${{ github.event.inputs.solution_name }}_Unmanaged.zip
          solution-folder: ${{ github.event.inputs.solution_folder }}${{ github.event.inputs.solution_name }}
          solution-type: Unmanaged
          overwrite-files: true

      - name: Generate branch name and create branch
        id: branch-setup
        run: |
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $branchName = "${{ github.event.inputs.solution_name }}-$timestamp"
          echo "branch_name=$branchName" >> $env:GITHUB_OUTPUT
          
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b $branchName
          git push -u origin $branchName
          
          Write-Host "‚úÖ Created and switched to branch: $branchName"
        shell: pwsh

      - name: Copy Solution Files
        run: |
          # Copy unpacked solution to target folder
          $sourceFolder = "${{ github.event.inputs.solution_folder }}${{ github.event.inputs.solution_name }}"
          $targetFolder = "${{ github.event.inputs.solution_target_folder }}${{ github.event.inputs.solution_name }}"
          
          if (Test-Path $sourceFolder) {
            if (Test-Path $targetFolder) {
              Remove-Item $targetFolder -Recurse -Force
            }
            Copy-Item $sourceFolder $targetFolder -Recurse -Force
            Write-Host "‚úÖ Solution files copied to $targetFolder"
          } else {
            Write-Host "‚ùå Source folder not found: $sourceFolder"
            exit 1
          }
        shell: pwsh

      - name: Commit and Push Changes
        run: |
          git add .
          
          # Check if there are changes
          $changes = git status --porcelain
          if ($changes) {
            git commit -m "Export solution ${{ github.event.inputs.solution_name }} - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            git push origin ${{ steps.branch-setup.outputs.branch_name }}
            Write-Host "‚úÖ Changes committed and pushed to branch: ${{ steps.branch-setup.outputs.branch_name }}"
          } else {
            Write-Host "‚ÑπÔ∏è No changes to commit"
          }
        shell: pwsh

      - name: Create Pull Request
        run: |
          $title = "Solution Export: ${{ github.event.inputs.solution_name }} - ${{ steps.branch-setup.outputs.branch_name }}"
          $body = "## Solution Export Summary`n`n**Solution Name:** ${{ github.event.inputs.solution_name }}`n**Branch:** ${{ steps.branch-setup.outputs.branch_name }}`n**Export Date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n**Source Environment:** ${{ secrets.ENVIRONMENT_URL }}`n`n### Files Added/Updated:`n- ‚úÖ Managed solution: ``out/managed/${{ github.event.inputs.solution_name }}_Managed.zip```n- ‚úÖ Unmanaged solution: ``${{ github.event.inputs.solution_exported_folder }}${{ github.event.inputs.solution_name }}_Unmanaged.zip```n- ‚úÖ Unpacked solution files: ``${{ github.event.inputs.solution_target_folder }}${{ github.event.inputs.solution_name }}/```n`n### Next Steps:`n1. Review the changes in this PR`n2. Merge this PR to make the solution available in main branch`n3. Use the **deploy-solution-to-test** workflow with branch ``${{ steps.branch-setup.outputs.branch_name }}`` or ``main`` (after merge)"
          
          gh pr create --title "$title" --body "$body" --base main --head ${{ steps.branch-setup.outputs.branch_name }}
          Write-Host "‚úÖ Pull Request created successfully"
        env:
          GH_TOKEN: ${{ secrets.GITTOKEN }}
        shell: pwsh

      - name: Export Summary
        run: |
          Write-Host "============================================"
          Write-Host "‚úÖ EXPORT COMPLETED SUCCESSFULLY!"
          Write-Host "============================================"
          Write-Host "Solution: ${{ github.event.inputs.solution_name }}"
          Write-Host "Branch: ${{ steps.branch-setup.outputs.branch_name }}"
          Write-Host "Managed zip: out/managed/${{ github.event.inputs.solution_name }}_Managed.zip"
          Write-Host "============================================"
          Write-Host "üìã NEXT STEPS:"
          Write-Host "1. Review the created Pull Request"
          Write-Host "2. Merge PR to main branch"
          Write-Host "3. Use deploy workflow with branch: ${{ steps.branch-setup.outputs.branch_name }}"
          Write-Host "   OR use branch: main (after merging PR)"
          Write-Host "============================================"
        shell: pwsh
