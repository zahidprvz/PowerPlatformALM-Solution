name: deploy-solution-to-test

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: 'Name of the solution to deploy'
        required: true
        default: ITHistoryV5
      source_branch:
        description: 'Git branch to pick the solution from'
        required: true
        default: main

permissions:
  contents: read

jobs:
  deploy-to-test:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.source_branch }}
          token: ${{ secrets.GITTOKEN }}
          lfs: true

      - name: Verify solution file exists
        run: |
          $solutionPath = "out/managed/${{ github.event.inputs.solution_name }}_Managed.zip"
          if (-not (Test-Path $solutionPath)) {
            Write-Host "‚ùå Solution file not found: $solutionPath"
            Write-Host "Please run the export workflow first."
            exit 1
          }
          $fileSize = (Get-Item $solutionPath).Length
          Write-Host "‚úÖ Found solution file: $solutionPath ($([math]::Round($fileSize/1MB, 2)) MB)"
        shell: pwsh

      - name: Install Power Platform CLI
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Authenticate with Service Principal
        run: |
          & "$env:POWERPLATFORMTOOLS_PACPATH" auth create `
            --url "${{ secrets.TARGET_ENVIRONMENT_URL }}" `
            --applicationId "${{ secrets.CLIENT_ID }}" `
            --clientSecret "${{ secrets.CLIENT_SECRET }}" `
            --tenant "${{ secrets.TENANT_ID }}"
        shell: pwsh

      - name: Who Am I (Target Environment)
        run: |
          & "$env:POWERPLATFORMTOOLS_PACPATH" org who
        shell: pwsh

      - name: Import Managed Solution (with retry)
        run: |
          $maxRetries = 3
          $retryDelay = 30
          $attempt = 1
          $success = $false
          
          while ($attempt -le $maxRetries -and -not $success) {
            try {
              Write-Host "üîÑ Import attempt $attempt of $maxRetries"
              
              & "$env:POWERPLATFORMTOOLS_PACPATH" solution import `
                --path "out/managed/${{ github.event.inputs.solution_name }}_Managed.zip" `
                --environment "${{ secrets.TARGET_ENVIRONMENT_URL }}" `
                --activate-plugins `
                --force-overwrite `
                --publish-changes `
                --convert-to-managed `
                --max-async-wait-time 120

              if ($LASTEXITCODE -eq 0) {
                $success = $true
                Write-Host "‚úÖ Solution imported successfully on attempt $attempt"
              } else {
                throw "Import failed with exit code $LASTEXITCODE"
              }
            } catch {
              Write-Host "‚ùå Attempt $attempt failed: $($_.Exception.Message)"
              if ($attempt -lt $maxRetries) {
                Write-Host "‚è≥ Waiting $retryDelay seconds before retry..."
                Start-Sleep -Seconds $retryDelay
              }
              $attempt++
            }
          }
          
          if (-not $success) {
            Write-Host "‚ùå All import attempts failed"
            exit 1
          }
        shell: pwsh

      - name: Clear Authentication
        run: |
          & "$env:POWERPLATFORMTOOLS_PACPATH" auth clear
        shell: pwsh

      - name: Deployment Summary
        run: |
          Write-Host "‚úÖ Deployment completed successfully!"
          Write-Host "Solution: ${{ github.event.inputs.solution_name }}"
          Write-Host "Target: ${{ secrets.TARGET_ENVIRONMENT_URL }}"
          Write-Host "Deployed at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        shell: pwsh
